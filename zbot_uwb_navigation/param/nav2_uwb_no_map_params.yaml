bt_navigator:
  ros__parameters:
    use_sim_time: False                     # Whether to use simulated time; False for real-world applications.
    global_frame: map                      # Global reference frame for navigation; 'odom' instead of 'map' here.
    robot_base_frame: base_footprint             # Frame representing the base of the robot.
    odom_topic: /odometry/filtered          # Topic for odometry data.
    bt_loop_duration: 10                    # Duration (milliseconds) of each behavior tree loop iteration.
    default_server_timeout: 10              # Timeout (seconds) for server requests.
    wait_for_service_timeout: 1000          # Timeout (milliseconds) for waiting on service connections.

    # Plugin libraries
    plugin_lib_names:                       # List of plugins defining actions and conditions for navigation BTs.
      - nav2_compute_path_to_pose_action_bt_node        # Computes path to a specified pose.
      - nav2_compute_path_through_poses_action_bt_node  # Computes path through multiple poses.
      - nav2_smooth_path_action_bt_node                 # Smooths the planned path for optimal travel.
      - nav2_follow_path_action_bt_node                 # Controls the robot to follow the computed path.
      - nav2_spin_action_bt_node                        # Executes a spin action to reorient the robot.
      - nav2_wait_action_bt_node                        # Pauses the robot at its current position.
      - nav2_assisted_teleop_action_bt_node             # Allows teleoperation with autonomous assistance.
      - nav2_back_up_action_bt_node                     # Moves the robot backward safely.
      - nav2_drive_on_heading_bt_node                   # Drives the robot in a specified direction.
      - nav2_clear_costmap_service_bt_node              # Clears obstacles from the costmap.
      - nav2_is_stuck_condition_bt_node                 # Checks if the robot is stuck.
      - nav2_goal_reached_condition_bt_node             # Determines if the robot has reached its goal.
      - nav2_goal_updated_condition_bt_node             # Checks if the goal has been updated.
      - nav2_globally_updated_goal_condition_bt_node    # Checks for a global goal update.
      - nav2_is_path_valid_condition_bt_node            # Verifies if the current path is still valid.
      - nav2_initial_pose_received_condition_bt_node    # Checks if the initial pose has been received.
      - nav2_reinitialize_global_localization_service_bt_node # Reinitializes global localization.
      - nav2_rate_controller_bt_node                    # Controls behavior based on rate conditions.
      - nav2_distance_controller_bt_node                # Controls behavior based on distance conditions.
      - nav2_speed_controller_bt_node                   # Controls behavior based on speed conditions.
      - nav2_truncate_path_action_bt_node               # Truncates the path for optimized navigation.
      - nav2_truncate_path_local_action_bt_node         # Locally truncates the path.
      - nav2_goal_updater_node_bt_node                  # Updates the navigation goal.
      - nav2_recovery_node_bt_node                      # Executes a recovery action.
      - nav2_pipeline_sequence_bt_node                  # Manages sequence execution in the BT pipeline.
      - nav2_round_robin_node_bt_node                   # Manages BT sequence in a round-robin fashion.
      - nav2_transform_available_condition_bt_node      # Checks if required transforms are available.
      - nav2_time_expired_condition_bt_node             # Checks if the defined time has expired.
      - nav2_path_expiring_timer_condition              # Checks if the path is about to expire.
      - nav2_distance_traveled_condition_bt_node        # Checks if a certain distance has been traveled.
      - nav2_single_trigger_bt_node                     # Single-use trigger for BT conditions.
      - nav2_goal_updated_controller_bt_node            # Updates the goal in the BT controller.
      - nav2_is_battery_low_condition_bt_node           # Checks if the robot's battery level is low.
      - nav2_navigate_through_poses_action_bt_node      # Navigates through multiple poses in sequence.
      - nav2_navigate_to_pose_action_bt_node            # Navigates to a specific pose.
      - nav2_remove_passed_goals_action_bt_node         # Removes goals that have already been passed.
      - nav2_planner_selector_bt_node                   # Selects the appropriate planner.
      - nav2_controller_selector_bt_node                # Selects the appropriate controller.
      - nav2_goal_checker_selector_bt_node              # Selects the appropriate goal checker.
      - nav2_controller_cancel_bt_node                  # Cancels the current controller action.
      - nav2_path_longer_on_approach_bt_node            # Checks if path length increases when approaching.
      - nav2_wait_cancel_bt_node                        # Cancels the wait action.
      - nav2_spin_cancel_bt_node                        # Cancels the spin action.
      - nav2_back_up_cancel_bt_node                     # Cancels the back-up action.
      - nav2_assisted_teleop_cancel_bt_node             # Cancels the assisted teleoperation action.
      - nav2_drive_on_heading_cancel_bt_node            # Cancels the drive on heading action.
      - nav2_is_battery_charging_condition_bt_node      # Checks if the battery is charging.


bt_navigator_navigate_through_poses_rclcpp_node:
  ros__parameters:
    use_sim_time: False                     # Whether to use simulated time; False for real-world applications.


bt_navigator_navigate_to_pose_rclcpp_node:
  ros__parameters:
    use_sim_time: False                     # Whether to use simulated time; False for real-world applications.

controller_server:
  ros__parameters:
    use_sim_time: False
    controller_frequency: 20.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.3
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["general_goal_checker"] # "precise_goal_checker"
    controller_plugins: ["FollowPath"]

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.1
      movement_time_allowance: 10.0
    # Goal checker parameters
    #precise_goal_checker:
    #  plugin: "nav2_controller::SimpleGoalChecker"
    #  xy_goal_tolerance: 0.25
    #  yaw_goal_tolerance: 0.25
    #  stateful: True
    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.25
      yaw_goal_tolerance: 0.25
    # DWB parameters
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"
      debug_trajectory_details: True
      min_vel_x: 0.0
      min_vel_y: 0.0
      max_vel_x: 0.05
      max_vel_y: 0.0
      max_vel_theta: 0.3
      min_speed_xy: 0.0
      max_speed_xy: 0.05
      min_speed_theta: 0.0
      # Add high threshold velocity for turtlebot 3 issue.
      # https://github.com/ROBOTIS-GIT/turtlebot3_simulations/issues/75
      acc_lim_x: 2.5
      acc_lim_y: 0.0
      acc_lim_theta: 3.2
      decel_lim_x: -2.5
      decel_lim_y: 0.0
      decel_lim_theta: -3.2
      vx_samples: 20
      vy_samples: 5
      vtheta_samples: 20
      sim_time: 1.7
      linear_granularity: 0.05
      angular_granularity: 0.025
      transform_tolerance: 5.0
      xy_goal_tolerance: 0.25
      trans_stopped_velocity: 0.25
      short_circuit_trajectory_evaluation: True
      stateful: True
      critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      BaseObstacle.scale: 0.02
      PathAlign.scale: 32.0
      PathAlign.forward_point_distance: 0.1
      GoalAlign.scale: 24.0
      GoalAlign.forward_point_distance: 0.1
      PathDist.scale: 32.0
      GoalDist.scale: 24.0
      RotateToGoal.scale: 32.0
      RotateToGoal.slowing_factor: 5.0
      RotateToGoal.lookahead_time: -1.0

local_costmap:
  local_costmap:
    ros__parameters:
      use_sim_time: False
      enabled: True
      update_frequency: 10.0
      publish_frequency: 5.0
      global_frame: odom
      robot_base_frame: base_footprint
      rolling_window: true
      width: 3
      height: 3
      resolution: 0.05
      # robot_radius: 0.22
      footprint: "[ [0.125, 0.125], [0.125, -0.125], [-0.125, -0.125], [-0.125, 0.125] ]"
      plugins: ["voxel_layer", "inflation_layer"]
      
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: true
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        mark_threshold: 0
        max_obstacle_height: 2.0
        observation_sources:  lidar #pointcloud

        pointcloud:
          topic: /front_rscam/depth/color/points
          data_type: PointCloud2
          expected_update_rate: 0.0
          min_obstacle_height: 0.0
          max_obstacle_height: 2.0
          obstacle_range: 2.5
          raytrace_range: 3.0
          clearing: true
          marking: true

        lidar:
          topic: /front/scan
          data_type: LaserScan
          expected_update_rate: 0.0
          min_obstacle_height: 0.0
          max_obstacle_height: 2.0
          obstacle_range: 2.5
          raytrace_range: 3.0
          clearing: true
          marking: true

      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.25
      always_send_full_costmap: True

global_costmap:
  global_costmap:
    ros__parameters:
      use_sim_time: False
      enabled: True
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_footprint
      # robot_radius: 0.22
      footprint: "[ [0.125, 0.125], [0.125, -0.125], [-0.125, -0.125], [-0.125, 0.125] ]"
      resolution: 0.1
      rolling_window: True
      width: 50
      height: 50
      track_unknown_space: true
      plugins: ["voxel_layer", "inflation_layer"]

      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: true
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        mark_threshold: 0
        max_obstacle_height: 2.0
        observation_sources:  lidar #pointcloud

        pointcloud:
          topic: /front_rscam/depth/color/points
          data_type: PointCloud2
          expected_update_rate: 0.0
          min_obstacle_height: 0.0
          max_obstacle_height: 2.0
          obstacle_range: 2.5
          raytrace_range: 3.0
          clearing: true
          marking: true

        lidar:
          topic: /front/scan
          data_type: LaserScan
          expected_update_rate: 0.0
          min_obstacle_height: 0.0
          max_obstacle_height: 2.0
          obstacle_range: 2.5
          raytrace_range: 3.0
          clearing: true
          marking: true

      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.25
      always_send_full_costmap: True


map_saver:
  ros__parameters:
    use_sim_time: False
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True

planner_server:
  ros__parameters:
    use_sim_time: False
    expected_planner_frequency: 20.0
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner"
      # plugin: "nav2_smac_planner/SmacPlannerLattice"
      tolerance: 0.5
      use_astar: false
      allow_unknown: true

smoother_server:
  ros__parameters:
    use_sim_time: False
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      max_its: 1000
      do_refinement: True

behavior_server:
  ros__parameters:
    use_sim_time: False 
    local_costmap_topic: local_costmap/costmap_raw
    global_costmap_topic: global_costmap/costmap_raw
    local_footprint_topic: local_costmap/published_footprint
    global_footprint_topic: global_costmap/published_footprint
    cycle_frequency: 10.0
    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]
    spin:
      plugin: "nav2_behaviors/Spin"
    backup:
      plugin: "nav2_behaviors/BackUp"
    drive_on_heading:
      plugin: "nav2_behaviors/DriveOnHeading"
    wait:
      plugin: "nav2_behaviors/Wait"
    assisted_teleop:
      plugin: "nav2_behaviors/AssistedTeleop"
    local_frame: odom
    global_frame: map
    robot_base_frame: base_footprint
    transform_tolerance: 0.1
    simulate_ahead_time: 2.0
    max_rotational_vel: 0.3
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2

waypoint_follower:
  ros__parameters:
    use_sim_time: False
    loop_rate: 20
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200

velocity_smoother:
  ros__parameters:
    use_sim_time: False
    smoothing_frequency: 20.0
    scale_velocities: False
    feedback: "OPEN_LOOP"
    max_velocity: [0.1, 0.0, 1.0]
    min_velocity: [-0.1, 0.0, -1.0]
    max_accel: [2.5, 0.0, 3.2]
    max_decel: [-2.5, 0.0, -3.2]
    odom_topic: "odom"
    odom_duration: 0.1
    deadband_velocity: [0.0, 0.0, 0.0]
    velocity_timeout: 1.0
